= Raisin =

The purpose of Raisin is to retrieve and build from source everything
needed for a good Xen installation. Today that includes at least Xen,
Grub and Libvirt. It can be used to quickly setup a Xen development
environment.  Optionally it can also install and configure the system
for you.

Raisin is meant to be easy to read so that it can be used as a guideline
on how to build and configure the system.



= Usage =

Set your configuration parameters in the "config" file, then run

./raise.sh build

Reply to questions and go and grab a coffee. When the script completes, you'll
have a full Xen system installation under DESTDIR and a deb or rpm package
(depending on your distro) containing all the necessary binaries in the raisin
directory.

raise.sh takes care of:

- git cloning all the components enabled in the config
- installing all the dependencies needed to build each components (requires sudo)
- building them
- installing them under DESTDIR (the "dist" sub-directory by default)
- creating a deb or rpm package with all the content

raise.sh can also perform the installation under / and fully
configure the system for you. If you want this behaviour run

./raise.sh install
./raise.sh configure

raise.sh performs the installation by installing the deb or rpm package,
hence it can be easily uninstalled by unraise.sh or manually by the
user.
It is also possible to specify which components to enable on the command
line:

COMPONENTS="xen qemu" ./raise build


= Adding new components =

Adding new components is easy!

Just introduce a new component script file under "components", following
the example of the already existing ones. Remember to add the component
name in the series file in the right order (for example anything that
depends on Xen, should be built after Xen).


You need to implement a few bash functions in the component script file:

* component_check_package
passes a list of build dependencies to check-package

* component_build
git clones, builds and installs the new component under DESTDIR

* component_clean
cleans the build

* component_configure
The component has already been installed, now configure the system for
it

* component_unconfigure
The component has already been uninstalled, now remove the configuration

These functions are called by raise.sh automatically if the component is
enabled in the config.


You can/should rely on the following global variables in your component
script file:

GIT: git command to run, but prefer the git-checkout.sh script
RAISIN_MAKE: make command to run
SUDO: sudo command to run
DISTRO: which Linux distribution we are running on, Debian, Fedora, etc
PKGTYPE: which package format is used by the distro, rpm, deb, etc
ARCH: which architecture we are running on, x86_64, arm32, etc.
BASEDIR: absolute path of the raisin directory
PREFIX: installation PREFIX
INST_DIR: absolute path of the installation directory
COMPONENT_URL: git url to clone, set by config
COMPONENT_REVISION: branch or tag to checkout, set by config

You can also rely on any utility functions in common-functions.sh, in
particular:

install_dependencies
start_initscripts
stop_initscripts
check-package

If your component comes with additional data, maybe a config script or
anything else, place it under "data".
